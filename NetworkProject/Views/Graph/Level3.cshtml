@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<meta charset="utf-8">
<style>
    path.link {
        fill: none;
        stroke: #666;
        stroke-width: 1.5px;
    }

    circle {
        fill: #4cff00;
        stroke: #0026ff;
        stroke-width: 1.5px;
    }

    text {
        fill: #246a9c;
        font: 16px sans-serif;
        pointer-events: none;
    }
</style>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

// get the data
    d3.json('@Url.Action("VisualizationData")', function(error, graph) {

        var counterInLinksNodes = {};
        // init count for incoming links counter to 0.
        for (var i = 0; i < graph.nodes.length; i++) {
            counterInLinksNodes[i] = 0;
        }
        // Compute the distinct nodes from the links.
        graph.links.forEach(function (link) {
            // incoming links counter ++
            counterInLinksNodes[link.target] += 1 ;
        });

        var width = $(document).width() -20;
        var height = $(document).height() -20;

        var color = d3.scale.category20();

        var force = d3.layout.force()
            .nodes(graph.nodes)
            .links(graph.links)
            .gravity(.05)
            .size([width, height])
            .linkDistance(300)
            .on("tick", tick)
            .charge(-1200)        
            .start();
        var svg = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);

        // build the arrow.
        svg.append("svg:defs").selectAll("marker")
            .data(["end"])
            .enter().append("svg:marker")
            .attr("id", String)
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 5)
            .attr("refY", -0.5)
            .attr("markerWidth", 4)
            .attr("markerHeight", 4)
            .attr("orient", "auto")
            .append("svg:path")
            .attr("d", "M0,-5L10,0L0,5");

        var link = svg.selectAll(".link")
                   .data(graph.links)
                   .enter().append("line")
                   .attr("class", "link")
                   .style("stroke-width", function (d) { return Math.sqrt(d.value); });

        // add the links and the arrows
        var path = svg.append("svg:g").selectAll("path")
            .data(force.links())
            .enter().append("svg:path")
            .attr("class", "link")
            .attr("marker-end", "url(#end)");

        // define the nodes
        var node = svg.selectAll(".node")
            .data(force.nodes())
            .enter().append("g")
            .attr("class", "node")
            .style("fill", function (d) { return color(d.group); })
            .call(force.drag);
        // add the nodes
        node.append("circle")
            .attr("r", function (d) { return (counterInLinksNodes[d.index] + 4); });
        // add the text
        node.append("text")
            .attr("x", 12)
            .attr("dy", ".35em")
            .text(function (d) { return "(" + d.name + ")";
            });
        function tick() {
            // draw directed edges with proper padding from node centers
            path.attr('d', function(d) {
                var deltaX = d.target.x - d.source.x,
                    deltaY = d.target.y - d.source.y,
                    dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),
                    normX = deltaX / dist,
                    normY = deltaY / dist,
                    sourcePadding = d.left ? 17 : 12,
                    targetPadding = d.right ? 17 : 12,
                    sourceX = d.source.x + (sourcePadding * normX),
                    sourceY = d.source.y + (sourcePadding * normY),
                    targetX = d.target.x - (targetPadding * normX),
                    targetY = d.target.y - (targetPadding * normY);
                return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;
            });
            node.attr("transform", function (d) { return "translate(' + d.x + ',' + d.y + ')"; });
        }
    });    
</script>
